#!/bin/bash

# Load our configuration variables.
. "$1/RustConfig"

# Standard paranoia.
set -eu

# Check our configuration options.
if [ -z ${VERSION+x} ]; then
  >&2 echo "failed: RustConfig must set VERSION to indicate the Rust version."
  exit 1
fi

# Notify users running old, unstable versions of Rust about how to deploy
# successfully.
if [ ! -z ${CARGO_URL+x} ] || [ ! -f "$1/Cargo.toml" ]; then
    >&2 cat <<EOF
To deploy a modern Rust app, make sure you have a Cargo.toml file, and that
you do not define CARGO_URL or CARGO_VERSION in RustConfig.  If you're
using an older version of Rust, and you need to re-deploy an existing
application, try setting your buildpack to:

  https://github.com/emk/heroku-buildpack-rust.git#old-rust
EOF
    exit 1
fi

# Handle people who still aren't using Rustup.
if [ ! -z ${URL+x} ]; then
    >&2 cat <<EOF
heroku-pack-rust has switched to using rustup.  You no longer need a
URL field in RustConfig. Instead, you should just specify a
rustup-compatible version (such as `1.11`, `stable` or `nighty`) in VERSION.
EOF
    exit 1
fi

# Switch to our cache directory.
mkdir -p "$2"
cd "$2"

# Rustup wants to create `~/.multirust` and fill it with toolchains.  If we
# set $HOME to our cache directory, it will do the right thing.
export HOME="`pwd`"

# This is where we will cache our downloaded compilers, as well as git
# repositories downloaded by Cargo.  We implicitly trust Rustup and Cargo
# to do the right thing when new versions are released.
export CARGO_HOME="`pwd`/cargo"

# Make sure we have the correct Rust binaries and set up PATH.  We don't
# skip this step even if $RUST_HOME exists, because rustup may want to
# update our channel.
PATH="$CARGO_HOME/bin:$PATH"
if [ -d "$CARGO_HOME" ]; then
    echo "-----> Checking for new releases of Rust $VERSION channel"
    # It's possible that $VERSION has changed, or the `stable` channel has updated.
    rustup self update
    rustup update "$VERSION"
    rustup default "$VERSION"
else
    echo "-----> Downloading rustup"
    curl https://sh.rustup.rs -sSf > rustup.sh
    chmod u+x rustup.sh
    echo "-----> Using rustup to install Rust channel $VERSION"
    ./rustup.sh -y
    rm rustup.sh
fi
if [ ! -x "$CARGO_HOME/bin/rustc" ]; then
  echo "failed: Cannot find Rust binaries at $CARGO_HOME"
  exit 1
fi

# This is where we will cache our Rust output.  Note the suggestions at
# https://github.com/alexcrichton/cargo/commit/014765f788ca1c2476936835ca32cc2746f99b42
# which describe how this needs to be named.
export CARGO_TARGET_DIR="$2/target"

# Build our project (into CARGO_TARGET_DIR so we have caching) and copy it
# back to the source tree.  In theory, we could probably just copy the
# binary or do something clever with `cargo install`, but we haven't
# figured that out yet.
#
# To debug git issues:
#export RUST_LOG="cargo::sources::git=debug"
# To debug compiler and linking issues, add `--verbose`.
echo "-----> Building application using Cargo"
cd "$1"
rm -rf target/
cargo build --release
cp -a "$CARGO_TARGET_DIR" target
