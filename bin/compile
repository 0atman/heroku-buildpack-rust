#!/bin/sh

# Load our configuration variables.
. "$1/RustConfig"

# Check our configuration options.
if [ -z "$URL" ]; then
  echo "failed: RustConfig must set URL to point to a Rust binary tarball."
  exit 1
fi
if [ -z "$VERSION" ]; then
  echo "failed: RustConfig must set VERSION to indicate the Rust version."
  exit 1
fi

# Switch to our cache directory.
mkdir -p "$2"
cd "$2"

# Create a dummy version of git, because some Rust libraries have Makefiles
# that set up submodules even when they're already there.
mkdir -p tools
cat > ./tools/git << 'EOF'
#!/bin/sh
echo "WARNING: Skipping git command: git" "$@"
echo "WARNING: Please fix your Makefile to not call git when not inside"
echo "WARNING: a git checkout.  This feature will go away soon."
EOF
chmod +x ./tools/git
PATH="$2/tools:$PATH"

# Make sure we have the C++ runtime libraries required by the Rust nightly
# builds.
if [ -f lib/libstdc++.so.6.0.18 ]; then
  echo "-----> Using libstdc++.so.6.0.18"
else
  echo "-----> Downloading rust-support"
  rm -rf lib
  curl -O https://s3.amazonaws.com/rust-builds/rust-support.tar.gz
  tar xzvf rust-support.tar.gz
fi
LD_LIBRARY_PATH="$2/lib:$LD_LIBRARY_PATH"
export LD_LIBRARY_PATH

# Make sure we have the correct Rust binaries and set up PATH.
if [ -d rust-cache-$VERSION ]; then
  echo "-----> Using Rust version $VERSION"
else
  echo "-----> Downloading Rust version $VERSION binaries from $URL"

  rm -f rust.tar.gz
  rm -rf rust-cache-*
  curl -o rust.tar.gz "$URL"

  echo "-----> Extracting Rust binaries"

  mkdir rust-cache-$VERSION
  tar xzf rust.tar.gz -C rust-cache-$VERSION
  rm -r rust.tar.gz
fi
rust_path=`ls -1d "$2/rust-cache-$VERSION/"*"/bin"`
if [ ! -x "$rust_path/rustc" ]; then
    echo "failed: Cannot find rust binaries at $rust_path"
    exit 1
fi
PATH="$rust_path:$PATH"

# Build the actual application.
echo "-----> Building application"
cd "$1"
make
